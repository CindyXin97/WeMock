generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  targetRole    String    // DA/DS/DE/Other
  workExperience String  // 0/1-3/4-5/>5
  practiceAreas String[] // SQL/Python算法/Python数据处理/Case Study/Behavior Question
  targetIndustry String?
  targetCompany String?
  availableTime Json      // 存储可预约时间
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  interviewsAsInterviewer Interview[] @relation("Interviewer")
  interviewsAsInterviewee Interview[] @relation("Interviewee")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Interview {
  id          String    @id @default(cuid())
  type        String    // 面试类型
  status      String    // pending/accepted/completed
  scheduledAt DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  interviewer User      @relation("Interviewer", fields: [interviewerId], references: [id])
  interviewerId String
  interviewee User      @relation("Interviewee", fields: [intervieweeId], references: [id])
  intervieweeId String
  feedback    Feedback?
}

model Feedback {
  id          String    @id @default(cuid())
  interview   Interview @relation(fields: [interviewId], references: [id])
  interviewId String    @unique
  rating      Int       // 1-5
  comment     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
} 